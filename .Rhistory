ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
library(librarian)
librarian::shelf(dplyr, stringr,
Seurat, SeuratDisk, clusterProfiler,
ggplot2, gridExtra, cowplot)
urlhead <- 'https://ftp.ncbi.nlm.nih.gov/geo/series/GSE120nnn/GSE120537/suppl/'
if(!dir.exists(file.path(getwd(), 'integration', 'input'))) {
dir.create(file.path(getwd(), 'integration', 'input'), recursive = TRUE) }
if(!file.exists(file.path(getwd(), 'integration', 'input', 'GSE120537_counts.csv.gz'))) {
download.file(paste0(urlhead, 'GSE120537_counts.csv.gz'),
file.path(getwd(), 'integration', 'input', 'GSE120537_counts.csv.gz')) }
if(!file.exists(file.path(getwd(), 'integration', 'input', 'GSE120537_metadata-code-book.md.txt.gz'))) {
download.file(paste0(urlhead, 'GSE120537_metadata-code-book.md.txt.gz'),
file.path(getwd(), 'integration', 'input', 'GSE120537_metadata-code-book.md.txt.gz')) }
if(!file.exists(file.path(getwd(), 'integration', 'input', 'GSE120537_metadata.csv.gz'))) {
download.file(paste0(urlhead, 'GSE120537_metadata.csv.gz'),
file.path(getwd(), 'integration', 'input', 'GSE120537_metadata.csv.gz')) }
# (assumes I might need to run this multiple times)
if (file.exists('GSE120537_counts.rds')) {
GSE120537_counts <- readRDS('GSE120537_counts.rds')
} else {
GSE120537_counts <- read.csv(gzfile(file.path(getwd(), 'integration', 'input', 'GSE120537_counts.csv.gz')),
header = TRUE, row.names = 1)
saveRDS(GSE120537_counts, file='GSE120537_counts.rds', compress=TRUE)
}
if (file.exists('GSE120537_metadata.rds')) {
GSE120537_md <- readRDS('GSE120537_metadata.rds')
} else {
GSE120537_md <- read.csv(gzfile(file.path(getwd(), 'integration', 'input', 'GSE120537_metadata.csv.gz')),
header = TRUE, row.names = 1)
saveRDS(GSE120537_md, file='GSE120537_metadata.rds', compress=TRUE)
}
# identify genes by symbol
id2sym <- read.csv(file.path(getwd(), 'resources', 'tx2gs.csv'),
col.names=c("gene", "symbol", "transcript")) %>%
dplyr::select(-transcript) %>%
unique()
rownames(GSE120537_counts) = id2sym$symbol[match(rownames(GSE120537_counts), id2sym$gene)]
# align the cell ID patterns hbc02123.TATGCAGT.TGTTATCA.TGCTCCGT -> hbc02123-TATGCAGT:TGTTATCA-TGCTCCGT
# after https://stackoverflow.com/questions/43077846
names(GSE120537_counts) <- sub("\\.(.*?)\\.(.*?)\\.", "-\\1:\\2-", names(GSE120537_counts))
data1 <- CreateSeuratObject(counts = GSE120537_counts,
meta.data = GSE120537_md)
data1 <- SCTransform(data1, vars.to.regress = "pctMito", verbose = FALSE)
data1 <- RunPCA(data1, verbose = FALSE)
data1 <- RunUMAP(data1, dims = 1:30, verbose = FALSE)
DimPlot(data1, group.by = "technology")
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = 'png',
fig.align = 'center', fig.height = 7, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='notebook_figs/', warning=FALSE, message=FALSE)
if (!require("librarian")) install.packages("librarian")
librarian::shelf(
# data
dplyr, stringr, DESeq2, edgeR, biomaRt, rtracklayer, GenomicFeatures, limma,
# graphics
ggplot2, pheatmap, scico, dendsort,
# convenience
here, writexl, gzcon)
if (Sys.getenv("RSTUDIO")==1) {
# setwd to where the editor is, if the IDE is RStudio
setwd( dirname(rstudioapi::getSourceEditorContext(id = NULL)$path) )
} else {
# setwd to where the editor is in a general way - maybe less failsafe than the previous
setwd(here::here())
# the following checks that the latter went well, but assuming
# that the user has not changed the name of the repo
d <- str_split(getwd(),'/')[[1]][length(str_split(getwd(),'/')[[1]])]
if (d != 'Puigetal2023_bioinformatics_scripts') { stop(
paste0("Could not set working directory automatically to where this",
" script resides.\nPlease do `setwd()` manually"))
}
}
figdir <- paste0(c(head(str_split(getwd(),'/')[[1]],-1),
paste0(tail(str_split(getwd(),'/')[[1]],1), '_figures')),
collapse='/')
dir.create(figdir, showWarnings = FALSE)
ensembl <- useEnsembl(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="dmelanogaster_gene_ensembl",
host = "https://oct2022.archive.ensembl.org")
# to update this: https://www.ensembl.org/Help/ArchiveRedirect
filters <- listFilters(ensembl) # define filters for a specific query
attributes <- listAttributes(ensembl) # define the features showed
dlist <- getBM(attributes = c('ensembl_gene_id', 'external_gene_name'),
mart = ensembl)
rownames(dlist) <- dlist$ensembl_gene_id
dlist[1] <- NULL
names(dlist) <- 'gene_symbol'
write.table(dlist, file="resources/gene_symbols.txt", col.names=NA)
samples <- list('C3N4AACXX_1', 'C3N4AACXX_4', 'C3N4AACXX_9', 'C3N4AACXX_7',
'C3N4AACXX_11', 'C3N4AACXX_2', 'C3N4AACXX_6', 'C3N4AACXX_10',
'CON1', 'CON2', 'CON3', 'DA1', 'DA2', 'DA3', 'SCUTE1',
'SCUTE2', 'SCUTE3')
ids <- paste0('GSM7441', 184:200)
fore <- 'https://www.ncbi.nlm.nih.gov/geo/download/?acc='
mid <- '&format=file&file='
hind <- '.featurecount.txt.gz'
urls <- paste0(fore, ids, mid, ids, '_', samples, hind)
names(urls) <- ids
# get experimental design data:
targets <- read.table("input/targets.txt", header=TRUE, sep="\t")
targets$GEOsample <- ids[match(targets$sampleID, samples)]
# prepare to load gene count data
rawData <- NULL
# each column of rawData will contain the reads per gene of a sample
counter <- 0
for (geo in targets$GEOsample) {
connlink <- url( urls[ names(urls)==geo ] )
on.exit(close(connlink))
conn <- gzcon(connlink)
txt <- readLines(conn)
fileContents <- read.table(textConnection(txt), sep="\t", header=T)
rawData <- cbind(rawData, fileContents[,7])
}
# add column and row names to the `rawData` matrix
colnames(rawData) <- paste(targets$Condition, targets$Replicate, targets$Batch, sep='_')
rownames(rawData) <- fileContents$Geneid
# remove genes with low counts
cpms <- cpm(rawData)
keep <- rowSums(cpms > 1) >= 3 # detected in at least 3 samples
rawData <- rawData[keep,]
exptDesign = data.frame(
row.names = colnames(rawData),
condition = targets$Condition,
batch = targets$Batch)
exptObject <- DESeqDataSetFromMatrix(countData = rawData,
colData = exptDesign,
design = ~ batch + condition)
# specify 'Control' as the reference level
exptObject$condition <- relevel(exptObject$condition, ref = "Control")
vsd_Object <- vst(exptObject, blind=TRUE)
plotPCA(vsd_Object)
assay(vsd_Object) <- removeBatchEffect(
assay(vsd_Object),
batch=vsd_Object$batch,
design=model.matrix(~condition, colData(vsd_Object))
)
plotPCA(vsd_Object)
saveRDS(vsd_Object, 'output/vst_pseudocounts_batchCorrected.RDS')
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = 'png',
fig.align = 'center', fig.height = 7, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='notebook_figs/', warning=FALSE, message=FALSE)
if (!require("librarian")) install.packages("librarian")
librarian::shelf(
# data
dplyr, stringr, DESeq2, edgeR, biomaRt, rtracklayer, GenomicFeatures, limma,
# graphics
ggplot2, pheatmap, scico, dendsort,
# convenience
here, writexl, gzcon)
if (Sys.getenv("RSTUDIO")==1) {
# setwd to where the editor is, if the IDE is RStudio
setwd( dirname(rstudioapi::getSourceEditorContext(id = NULL)$path) )
} else {
# setwd to where the editor is in a general way - maybe less failsafe than the previous
setwd(here::here())
# the following checks that the latter went well, but assuming
# that the user has not changed the name of the repo
d <- str_split(getwd(),'/')[[1]][length(str_split(getwd(),'/')[[1]])]
if (d != 'Puigetal2023_bioinformatics_scripts') { stop(
paste0("Could not set working directory automatically to where this",
" script resides.\nPlease do `setwd()` manually"))
}
}
figdir <- paste0(c(head(str_split(getwd(),'/')[[1]],-1),
paste0(tail(str_split(getwd(),'/')[[1]],1), '_figures')),
collapse='/')
dir.create(figdir, showWarnings = FALSE)
getwd()
dir.exists(getwd())
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = 'png',
fig.align = 'center', fig.height = 7, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='notebook_figs/', warning=FALSE, message=FALSE)
if (!require("librarian")) install.packages("librarian")
librarian::shelf(
# data
dplyr, stringr, DESeq2, edgeR, biomaRt, rtracklayer, GenomicFeatures, limma,
# graphics
ggplot2, pheatmap, scico, dendsort,
# convenience
here, writexl, gzcon)
if (Sys.getenv("RSTUDIO")==1) {
# setwd to where the editor is, if the IDE is RStudio
setwd( dirname(rstudioapi::getSourceEditorContext(id = NULL)$path) )
} else {
# setwd to where the editor is in a general way - maybe less failsafe than the previous
setwd(here::here())
# the following checks that the latter went well, but assuming
# that the user has not changed the name of the repo
d <- str_split(getwd(),'/')[[1]][length(str_split(getwd(),'/')[[1]])]
if (d != 'Puigetal2023_bioinformatics_scripts') { stop(
paste0("Could not set working directory automatically to where this",
" script resides.\nPlease do `setwd()` manually"))
}
}
figdir <- paste0(c(head(str_split(getwd(),'/')[[1]],-1),
paste0(tail(str_split(getwd(),'/')[[1]],1), '_figures')),
collapse='/')
dir.create(figdir, showWarnings = FALSE)
ensembl <- useEnsembl(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="dmelanogaster_gene_ensembl",
host = "https://oct2022.archive.ensembl.org")
# to update this: https://www.ensembl.org/Help/ArchiveRedirect
filters <- listFilters(ensembl) # define filters for a specific query
attributes <- listAttributes(ensembl) # define the features showed
dlist <- getBM(attributes = c('ensembl_gene_id', 'external_gene_name'),
mart = ensembl)
rownames(dlist) <- dlist$ensembl_gene_id
dlist[1] <- NULL
names(dlist) <- 'gene_symbol'
write.table(dlist, file="resources/gene_symbols.txt", col.names=NA)
samples <- list('C3N4AACXX_1', 'C3N4AACXX_4', 'C3N4AACXX_9', 'C3N4AACXX_7',
'C3N4AACXX_11', 'C3N4AACXX_2', 'C3N4AACXX_6', 'C3N4AACXX_10',
'CON1', 'CON2', 'CON3', 'DA1', 'DA2', 'DA3', 'SCUTE1',
'SCUTE2', 'SCUTE3')
ids <- paste0('GSM7441', 184:200)
fore <- 'https://www.ncbi.nlm.nih.gov/geo/download/?acc='
mid <- '&format=file&file='
hind <- '.featurecount.txt.gz'
urls <- paste0(fore, ids, mid, ids, '_', samples, hind)
names(urls) <- ids
# get experimental design data:
targets <- read.table("input/targets.txt", header=TRUE, sep="\t")
targets$GEOsample <- ids[match(targets$sampleID, samples)]
# prepare to load gene count data
rawData <- NULL
# each column of rawData will contain the reads per gene of a sample
counter <- 0
for (geo in targets$GEOsample) {
connlink <- url( urls[ names(urls)==geo ] )
on.exit(close(connlink))
conn <- gzcon(connlink)
txt <- readLines(conn)
fileContents <- read.table(textConnection(txt), sep="\t", header=T)
rawData <- cbind(rawData, fileContents[,7])
}
# add column and row names to the `rawData` matrix
colnames(rawData) <- paste(targets$Condition, targets$Replicate, targets$Batch, sep='_')
rownames(rawData) <- fileContents$Geneid
# remove genes with low counts
cpms <- cpm(rawData)
keep <- rowSums(cpms > 1) >= 3 # detected in at least 3 samples
rawData <- rawData[keep,]
exptDesign = data.frame(
row.names = colnames(rawData),
condition = targets$Condition,
batch = targets$Batch)
exptObject <- DESeqDataSetFromMatrix(countData = rawData,
colData = exptDesign,
design = ~ batch + condition)
# specify 'Control' as the reference level
exptObject$condition <- relevel(exptObject$condition, ref = "Control")
vsd_Object <- vst(exptObject, blind=TRUE)
plotPCA(vsd_Object)
assay(vsd_Object) <- removeBatchEffect(
assay(vsd_Object),
batch=vsd_Object$batch,
design=model.matrix(~condition, colData(vsd_Object))
)
plotPCA(vsd_Object)
saveRDS(vsd_Object, 'output/vst_pseudocounts_batchCorrected.RDS')
exists(vsd_Object)
exists('vsd_Object')
exists('vsd_Object')
dir.exists(file.path(getwd(), 'output'))
file.path(getwd(), 'output')
