knitr::kable()
# divide cells by scRNAseq technology and sex
object_2 <- SplitObject(data2, split.by = "technology")
rm(data2)
ss2 <- object_2[["ss2"]]
ss2_split <- SplitObject(ss2, split.by = "sex")
ss2_split[["male"]]@meta.data[["sample"]] <- "ss2_1"
ss2_split[["female"]]@meta.data[["sample"]] <- "ss2_2"
ss2 <- merge(ss2_split[["male"]], c(ss2_split[["female"]]),
add.cell.ids = c("male","female"))
tenx_2 <- object_2[["10x"]]
tenx_2_split <- SplitObject(tenx_2, split.by = "sex")
tenx_2_split[["male"]]@meta.data[["sample"]] <- "10x_3"
tenx_2_split[["female"]]@meta.data[["sample"]] <- "10x_4"
tenx_2 <- merge(tenx_2_split[["male"]], c(tenx_2_split[["female"]]),
add.cell.ids = c("male","female"))
rm('object_2', 'tenx_2_split', 'ss2_split')
outpath <- file.path(getwd(), 'output')
if (!file.exists( file.path(outpath, 'non_integrated_merged.rds') )) {
alldata <- merge(indrop, c(ss2,tenx_1,tenx_2),
add.cell.ids = c("indrop","ss2","tenx_1","tenx_2"))
rm('indrop', 'ss2', 'tenx_1', 'tenx_2')
# variable features
alldata <- FindVariableFeatures(alldata, nfeatures = 2000)
top20 <- head(VariableFeatures(alldata), 20)
LabelPoints(plot = VariableFeaturePlot(alldata), points = top20, repel = TRUE)
# scaling and dimensionality reduction
alldata <- ScaleData(alldata, verbose = FALSE)
alldata <- RunPCA(alldata, npcs = 30, verbose = FALSE)
alldata <- RunUMAP(alldata, dims = 1:30, verbose = FALSE)
# cache
if (!file.exists( outpath )) dir.create( outpath )
saveRDS(alldata, file.path(outpath, 'non_integrated_merged.rds'))
} else {
alldata <- readRDS(file.path(outpath, 'non_integrated_merged.rds'))
}
# check batch effects by sample/tech
p1 <- DimPlot(alldata, reduction = "umap", group.by = "data")
p1
# segregation by technology/experiment
p2 <- DimPlot(alldata, reduction = "umap", group.by = "sample")
p2
options(future.globals.maxSize = 3 * 1024^3) # to avoid Error in getGlobalsAndPackages with 1.00 GiB.
if (file.exists( file.path(outpath, 'alldata-int-cache1.rds') )) {
alldata.int <- readRDS( file.path(outpath, 'alldata-int-cache1.rds') )
} else {
# find anchor candidates per sample
alldata.list <- SplitObject(alldata, split.by = "sample")
rm(alldata)
for (i in 1:length(alldata.list)) {
alldata.list[[i]] <- ScaleData(alldata.list[[i]], verbose = FALSE)
alldata.list[[i]] <- NormalizeData(alldata.list[[i]], verbose = FALSE)
alldata.list[[i]] <- FindVariableFeatures(alldata.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = FALSE)}
# identify anchors and integrate
alldata.anchors <- FindIntegrationAnchors(alldata.list, dims = 1:30, verbose = FALSE)
to_integrate <- Reduce(intersect, lapply(alldata.anchors@object.list, rownames))
# this step is quite intensive
alldata.int <- IntegrateData(alldata.anchors, dims = 1:30, new.assay.name = "CCA",
features.to.integrate = to_integrate,
verbose = FALSE)
# manual cache for knitting the RMD into html
saveRDS(alldata.int, file.path(outpath, 'alldata-int-cache1.rds'))
}
if (file.exists( file.path(outpath, 'alldata-int-cache2.rds') )) {
alldata.int <- readRDS( file.path(outpath, 'alldata-int-cache2.rds') )
} else {
# rescale & PCA
alldata.int <- ScaleData(alldata.int, verbose = FALSE)
alldata.int <- RunPCA(alldata.int, npcs = 50, verbose = FALSE)
# show
DimPlot(alldata.int, reduction = "pca", group.by = "sample")
DimHeatmap(alldata.int, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(alldata.int, dims = 1:15, cells = 500, balanced = TRUE)
ElbowPlot(alldata.int, ndims = 50)
# 30 PCs is enough
alldata.int <- RunUMAP(alldata.int, dims = 1:30, verbose = FALSE)
alldata.int <- RunTSNE(alldata.int, dims = 1:30)
saveRDS(alldata.int, file.path(outpath, 'alldata-int-cache2.rds'))
}
# cells from different datasets and experiments now mingle
p3 <- DimPlot(alldata.int, reduction = "umap", group.by = "data")
p3
p4 <- DimPlot(alldata.int, reduction = "umap", group.by = "sample")
p4
alldata.int <- FindNeighbors(alldata.int, dims = 1:30)
# explore resolution parameter (more resolution gives more clusters)
for (res in c(0.1, 0.25, 0.5, 0.6, 1, 1.5, 2)) {
alldata.int <- FindClusters(alldata.int, resolution = res, algorithm = 1)
}
plot_grid(ncol = 3,
DimPlot(alldata.int, reduction = "umap", group.by = "CCA_snn_res.0.1") +
NoAxes() + ggtitle("louvain_0.1"),
DimPlot(alldata.int, reduction = "umap", group.by = "CCA_snn_res.0.25") +
NoAxes() + ggtitle("louvain_0.25"),
DimPlot(alldata.int, reduction = "umap", group.by = "CCA_snn_res.0.5") +
NoAxes() + ggtitle("louvain_0.5"),
DimPlot(alldata.int, reduction = "umap", group.by = "CCA_snn_res.1") +
NoAxes() + ggtitle("louvain_1"),
DimPlot(alldata.int, reduction = "umap", group.by = "CCA_snn_res.1.5") +
NoAxes() + ggtitle("louvain_1.5"),
DimPlot(alldata.int, reduction = "umap", group.by = "CCA_snn_res.2") +
NoAxes() + ggtitle("louvain_2")
)
# choose resolution = 1
alldata.int <- SetIdent(alldata.int, value = "CCA_snn_res.1")
table(alldata.int@active.ident)
DimPlot(alldata.int, reduction = "tsne", group.by = "CCA_snn_res.1")
DefaultAssay(alldata.int) <- "RNA"
# read markers
markers <- readr::read_csv(file.path("resources","cell_type_markers.csv"), col_types = 'cc')
knitr::kable(markers)
# set integrated clustering as cell identity
Idents(alldata.int) <- alldata.int@meta.data$CCA_snn_res.1
# get genome-wide gene expression per cluster, and visualise for marker genes
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, add.ident="sample")
# read markers
markers <- readr::read_csv(file.path("resources","cell_type_markers.csv"), col_types = 'cc')
knitr::kable(markers)
# set integrated clustering as cell identity
Idents(alldata.int) <- alldata.int@meta.data$CCA_snn_res.1
# get genome-wide gene expression per cluster, and visualise for marker genes
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, add.ident="sample")
# read markers
markers <- readr::read_csv(file.path("resources","cell_type_markers.csv"), col_types = 'cc')
knitr::kable(markers)
# set integrated clustering as cell identity
Idents(alldata.int) <- alldata.int@meta.data$CCA_snn_res.1
# get genome-wide gene expression per cluster, and visualise for marker genes
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by="sample")
assays(alldata.int)
alldata.int
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by="sample")
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by="sample", assay.use="RNA")
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by="sample", assay=assay.use)
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by="sample", assay='RNA')
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, size=2)
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes, size=2)
# read markers
markers <- readr::read_csv(file.path("resources","cell_type_markers.csv"), col_types = 'cc')
knitr::kable(markers)
# set integrated clustering as cell identity
Idents(alldata.int) <- alldata.int@meta.data$CCA_snn_res.1
# get genome-wide gene expression per cluster, and visualise for marker genes
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by="sample", assay='RNA')
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, size=2)
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes, size=2)
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by="ident", assay='RNA')
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, size=2)
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes, size=2)
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=("ident", 'sample'), assay='RNA')
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=('ident', 'sample'), assay='RNA')
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=(ident, sample), assay='RNA')
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=c('ident', 'sample'), assay='RNA')
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, size=2)
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes, size=2)
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=c('ident', 'sample'), layer='RNA')
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=c('ident', 'sample'), assays='RNA')
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, size=2)
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes, size=2)
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=c('sample', 'ident'), assays='RNA')
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=c('sample', 'ident'), assays='RNA')
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, size=2)
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes, size=2)
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=c('sample', 'ident'), assays='RNA')
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('sample', 'ident'), size=2)
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes, group.by=c('sample', 'ident'), size=2)
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('sample', 'ident'), size=1)
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes, group.by=c('sample', 'ident'), size=1)
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=c('ident', 'sample'), assays='RNA')
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), size=1)
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes, group.by=c('ident', 'sample'), size=1)
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by='ident', assays='RNA')
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, size=1)
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes, size=1)
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=c('ident', 'sample'), assays='RNA')
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), size=1)
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes, group.by=c('ident', 'sample'), size=1)
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), group.bar = FALSE, size=1)
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes, group.by=c('ident', 'sample'), group.bar = FALSE, size=1)
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), group.colors = FALSE, size=1)
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=c('ident', 'sample'), assays='RNA')
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), group.colors = FALSE)
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), group.colors = NULL)
DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), label = FALSE, size=1)
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes, group.by=c('ident', 'sample'), label = FALSE, size=1)
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), label = FALSE, size=1)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by='ident', label = FALSE, size=1)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by='ident', label = FALSE, size=1)
g #+ theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, label = FALSE, size=1)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), label = FALSE, size=1)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, label = FALSE, size=1)
g # theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, size=1)
g # theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, size=1)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, size=1, draw.lines = FALSE)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('sample'), size=1, draw.lines = FALSE)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, size=1, draw.lines = FALSE)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), size=1, draw.lines = TRUE)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, label = FALSE, group.by=c('ident', 'sample'), size=1, draw.lines = TRUE)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, label = FALSE, size=1, draw.lines = TRUE)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), size=1, draw.lines = TRUE)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), group.bar = FALSE, draw.lines = TRUE)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), group.bar = FALSE, draw.lines = TRUE)
g
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, draw.lines = TRUE)
g
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, group.by=c('ident', 'sample'), group.bar = FALSE, draw.lines = TRUE)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, draw.lines = TRUE)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes, draw.lines = TRUE, size=1)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes,
draw.lines = TRUE, lines.width = 1,
size=1)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes,
draw.lines = TRUE, lines.width = 0.1,
size=1)
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes,
draw.lines = FALSE,
size=1)
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes,
draw.lines = FALSE,
size=1)
g + theme(legend.position="none")
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes,
draw.lines = TRUE, lines.width = 0.1,
size=1)
g <- DoHeatmap(cluster.averages, features=head(markers, 20)$genes,
draw.lines = FALSE,
size=1)
g + theme(legend.position="none")
DoHeatmap(cluster.averages, features=head(markers, 20)$genes,
draw.lines = FALSE, size=1) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=head(markers, 20)$genes,
draw.lines = FALSE, size=1) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes,
group.by=c('sample'),
draw.lines = FALSE, size=1) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes,
group.by=c('ident'),
draw.lines = FALSE, size=1) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes,
group.by=c('ident'),
draw.lines = TRUE, size=1) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=head(markers, 20)$genes,
draw.lines = FALSE, size=1) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes,
group.by=c('ident'),
draw.lines = TRUE, size=1) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=head(markers, 20)$genes,
draw.lines = FALSE, size=1) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes,
group.by=c('ident'),
draw.lines = FALSE, size=1) + theme(legend.position="none")
clusters <- alldata.int@meta.data$CCA_snn_res.1
# assign cell type to cluster
celltype <- case_when(
clusters %in% c(0) ~ "enterocyte-like",
clusters %in% c(1,8,9,11,12,33) ~ "crop",
clusters %in% c(2) ~ "intestinal stem cell / enteroblast",
clusters %in% c(3,5,6,14,19,20,23,36) ~ "enterocyte of anterior midgut epithelium",
clusters %in% c(4,10,27) ~ "cardia",
clusters %in% c(7) ~ "midgut large flat cell",
clusters %in% c(13,16,21,31) ~ "enterocyte of posterior midgut epithelium",
clusters %in% c(15,22,29) ~ "midgut enterocyte",
clusters %in% c(17,28) ~ "enteroendocrine cell",
clusters %in% c(18) ~ "muscle cell",
clusters %in% c(24) ~ "differentiating enterocyte",
clusters %in% c(25) ~ "antimicrobial peptide-producing cell",
clusters %in% c(26) ~ "midgut-hindgut hybrid zone",
clusters %in% c(30) ~ "pylorus",
clusters %in% c(34) ~ "male accessory gland",
clusters %in% c(35) ~ "malpighian tubule",
clusters %in% c(32) ~ "unkown",
TRUE ~ as.character(clusters))
# set integrated cell types as new cell identity
alldata.int@meta.data$integrated_celltype <- celltype
Idents(alldata.int) <- alldata.int@meta.data$integrated_celltype
# get genome-wide gene expression per cluster, and visualise
integratedcelltype.averages <- AverageExpression(alldata.int, return.seurat=TRUE)
# read markers
markers <- readr::read_csv(file.path("resources","cell_type_markers.csv"), col_types = 'cc')
knitr::kable(markers)
# set integrated clustering as cell identity
Idents(alldata.int) <- alldata.int@meta.data$CCA_snn_res.1
# get genome-wide gene expression per cluster, and visualise for marker genes
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=c('ident', 'sample'), assays='SCT')
# read markers
markers <- readr::read_csv(file.path("resources","cell_type_markers.csv"), col_types = 'cc')
knitr::kable(markers)
# set integrated clustering as cell identity
Idents(alldata.int) <- alldata.int@meta.data$CCA_snn_res.1
# get genome-wide gene expression per cluster, and visualise for marker genes
cluster.averages <- AverageExpression(alldata.int, return.seurat=TRUE, group.by=c('ident', 'sample'), assays='RNA')
DoHeatmap(cluster.averages, features=head(markers, 20)$genes,
draw.lines = FALSE, size=1) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=tail(markers, 21)$genes,
group.by=c('ident'),
draw.lines = FALSE, size=1) + theme(legend.position="none")
clusters <- alldata.int@meta.data$CCA_snn_res.1
# assign cell type to cluster
celltype <- case_when(
clusters %in% c(0) ~ "enterocyte-like",
clusters %in% c(1,8,9,11,12,33) ~ "crop",
clusters %in% c(2) ~ "intestinal stem cell / enteroblast",
clusters %in% c(3,5,6,14,19,20,23,36) ~ "enterocyte of anterior midgut epithelium",
clusters %in% c(4,10,27) ~ "cardia",
clusters %in% c(7) ~ "midgut large flat cell",
clusters %in% c(13,16,21,31) ~ "enterocyte of posterior midgut epithelium",
clusters %in% c(15,22,29) ~ "midgut enterocyte",
clusters %in% c(17,28) ~ "enteroendocrine cell",
clusters %in% c(18) ~ "muscle cell",
clusters %in% c(24) ~ "differentiating enterocyte",
clusters %in% c(25) ~ "antimicrobial peptide-producing cell",
clusters %in% c(26) ~ "midgut-hindgut hybrid zone",
clusters %in% c(30) ~ "pylorus",
clusters %in% c(34) ~ "male accessory gland",
clusters %in% c(35) ~ "malpighian tubule",
clusters %in% c(32) ~ "unkown",
TRUE ~ as.character(clusters))
# set integrated cell types as new cell identity
alldata.int@meta.data$integrated_celltype <- celltype
Idents(alldata.int) <- alldata.int@meta.data$integrated_celltype
# get genome-wide gene expression per cluster, and visualise
integratedcelltype.averages <- AverageExpression(alldata.int, return.seurat=TRUE, assays='RNA')
DoHeatmap(integratedcelltype.averages, features=markers$genes, size=2)
DimPlot(alldata.int, group.by="integrated_celltype", label=TRUE)
DimPlot(alldata.int, group.by="integrated_celltype", label=TRUE, reduction = "pca")
DimPlot(alldata.int, group.by="integrated_celltype", label=TRUE, reduction = "tsne" )
# extract ISC/EB cluster from all cells
alldata.list <- SplitObject(alldata.int, split.by = "integrated_celltype")
isc_cluster <- alldata.list[["intestinal stem cell / enteroblast"]]
# re-cluster independently
DefaultAssay(isc_cluster) <- "CCA"
isc_cluster <- FindNeighbors(isc_cluster, dims = 1:30)
isc_cluster <- FindClusters(isc_cluster, resolution = 1, algorithm = 1)
DefaultAssay(isc_cluster) <- "RNA"
Idents(isc_cluster) <- isc_cluster@meta.data$CCA_snn_res.1
table(Idents(isc_cluster) )
# evaluate marker expression in clusters
isc <- c("Dl", "Smvt", "sna", "polo", "stf", "cnn")
eb <- c("klu", "E(spl)m3-HLH", "E(spl)malpha-BFM", "E(spl)mbeta-HLH")
cluster.averages <- AverageExpression(isc_cluster, return.seurat=TRUE, add.ident="sample")
# extract ISC/EB cluster from all cells
alldata.list <- SplitObject(alldata.int, split.by = "integrated_celltype")
isc_cluster <- alldata.list[["intestinal stem cell / enteroblast"]]
# re-cluster independently
DefaultAssay(isc_cluster) <- "CCA"
isc_cluster <- FindNeighbors(isc_cluster, dims = 1:30)
isc_cluster <- FindClusters(isc_cluster, resolution = 1, algorithm = 1)
DefaultAssay(isc_cluster) <- "RNA"
Idents(isc_cluster) <- isc_cluster@meta.data$CCA_snn_res.1
table(Idents(isc_cluster) )
# evaluate marker expression in clusters
isc <- c("Dl", "Smvt", "sna", "polo", "stf", "cnn")
eb <- c("klu", "E(spl)m3-HLH", "E(spl)malpha-BFM", "E(spl)mbeta-HLH")
cluster.averages <- AverageExpression(isc_cluster, return.seurat=TRUE, group.by=c('ident', 'sample'), assays='RNA')
DoHeatmap(cluster.averages, features=isc, size=2)
DoHeatmap(cluster.averages, features=eb, size=2)
clusters <- alldata.int@meta.data$CCA_snn_res.1
# assign cell type to cluster
celltype <- case_when(
clusters %in% c(0) ~ "enterocyte-like",
clusters %in% c(1,8,9,11,12,33) ~ "crop",
clusters %in% c(2) ~ "intestinal stem cell / enteroblast",
clusters %in% c(3,5,6,14,19,20,23,36) ~ "enterocyte of anterior midgut epithelium",
clusters %in% c(4,10,27) ~ "cardia",
clusters %in% c(7) ~ "midgut large flat cell",
clusters %in% c(13,16,21,31) ~ "enterocyte of posterior midgut epithelium",
clusters %in% c(15,22,29) ~ "midgut enterocyte",
clusters %in% c(17,28) ~ "enteroendocrine cell",
clusters %in% c(18) ~ "muscle cell",
clusters %in% c(24) ~ "differentiating enterocyte",
clusters %in% c(25) ~ "antimicrobial peptide-producing cell",
clusters %in% c(26) ~ "midgut-hindgut hybrid zone",
clusters %in% c(30) ~ "pylorus",
clusters %in% c(34) ~ "male accessory gland",
clusters %in% c(35) ~ "malpighian tubule",
clusters %in% c(32) ~ "unkown",
TRUE ~ as.character(clusters))
# set integrated cell types as new cell identity
alldata.int@meta.data$integrated_celltype <- celltype
Idents(alldata.int) <- alldata.int@meta.data$integrated_celltype
# get genome-wide gene expression per cluster, and visualise
integratedcelltype.averages <- AverageExpression(alldata.int, return.seurat=TRUE, assays='CCA')
DoHeatmap(integratedcelltype.averages, features=markers$genes, size=2)
clusters <- alldata.int@meta.data$CCA_snn_res.1
# assign cell type to cluster
celltype <- case_when(
clusters %in% c(0) ~ "enterocyte-like",
clusters %in% c(1,8,9,11,12,33) ~ "crop",
clusters %in% c(2) ~ "intestinal stem cell / enteroblast",
clusters %in% c(3,5,6,14,19,20,23,36) ~ "enterocyte of anterior midgut epithelium",
clusters %in% c(4,10,27) ~ "cardia",
clusters %in% c(7) ~ "midgut large flat cell",
clusters %in% c(13,16,21,31) ~ "enterocyte of posterior midgut epithelium",
clusters %in% c(15,22,29) ~ "midgut enterocyte",
clusters %in% c(17,28) ~ "enteroendocrine cell",
clusters %in% c(18) ~ "muscle cell",
clusters %in% c(24) ~ "differentiating enterocyte",
clusters %in% c(25) ~ "antimicrobial peptide-producing cell",
clusters %in% c(26) ~ "midgut-hindgut hybrid zone",
clusters %in% c(30) ~ "pylorus",
clusters %in% c(34) ~ "male accessory gland",
clusters %in% c(35) ~ "malpighian tubule",
clusters %in% c(32) ~ "unkown",
TRUE ~ as.character(clusters))
# set integrated cell types as new cell identity
alldata.int@meta.data$integrated_celltype <- celltype
Idents(alldata.int) <- alldata.int@meta.data$integrated_celltype
# get genome-wide gene expression per cluster, and visualise
integratedcelltype.averages <- AverageExpression(alldata.int, return.seurat=TRUE, assays='RNA')
DoHeatmap(integratedcelltype.averages, features=markers$genes, size=2)
DimPlot(alldata.int, group.by="integrated_celltype", label=TRUE)
DimPlot(alldata.int, group.by="integrated_celltype", label=TRUE, reduction = "pca")
DimPlot(alldata.int, group.by="integrated_celltype", label=TRUE, reduction = "tsne" )
# extract ISC/EB cluster from all cells
alldata.list <- SplitObject(alldata.int, split.by = "integrated_celltype")
isc_cluster <- alldata.list[["intestinal stem cell / enteroblast"]]
# re-cluster independently
DefaultAssay(isc_cluster) <- "CCA"
isc_cluster <- FindNeighbors(isc_cluster, dims = 1:30)
isc_cluster <- FindClusters(isc_cluster, resolution = 1, algorithm = 1)
DefaultAssay(isc_cluster) <- "RNA"
Idents(isc_cluster) <- isc_cluster@meta.data$CCA_snn_res.1
table(Idents(isc_cluster) )
# evaluate marker expression in clusters
isc <- c("Dl", "Smvt", "sna", "polo", "stf", "cnn")
eb <- c("klu", "E(spl)m3-HLH", "E(spl)malpha-BFM", "E(spl)mbeta-HLH")
cluster.averages <- AverageExpression(isc_cluster, return.seurat=TRUE, group.by=c('integrated_celltype', 'sample'), assays='RNA')
DoHeatmap(cluster.averages, features=isc, size=2)
DoHeatmap(cluster.averages, features=eb, size=2)
DoHeatmap(cluster.averages, features=isc,
draw.lines = FALSE, size=1) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=eb,
draw.lines = FALSE, size=1) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=isc,
draw.lines = FALSE, size=3) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=eb,
draw.lines = FALSE, size=3) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=isc,
group.by=c('integrated_celltype', 'sample'),
draw.lines = TRUE, size=3) + theme(legend.position="none")
DoHeatmap(cluster.averages, features=isc,
group.by=c('integrated_celltype', 'sample'),
draw.lines = TRUE, size=3) + theme(legend.position="none")
cluster.averages <- AverageExpression(isc_cluster, return.seurat=TRUE, group.by=c('integrated_celltype', 'sample'), assays='RNA')
DoHeatmap(cluster.averages, features=isc,
group.by=c('integrated_celltype', 'sample'),
draw.lines = TRUE, size=3) + theme(legend.position="none")
head(cluster.averages)
cluster.averages
str(cluster.averages)
cluster.averages <- AverageExpression(isc_cluster, return.seurat=TRUE, group.by=c('integrated_celltype', 'sample'), assays='CCA')
# extract ISC/EB cluster from all cells
alldata.list <- SplitObject(alldata.int, split.by = "integrated_celltype")
isc_cluster <- alldata.list[["intestinal stem cell / enteroblast"]]
# re-cluster independently
DefaultAssay(isc_cluster) <- "CCA"
isc_cluster <- FindNeighbors(isc_cluster, dims = 1:30)
isc_cluster <- FindClusters(isc_cluster, resolution = 1, algorithm = 1)
DefaultAssay(isc_cluster) <- "RNA"
Idents(isc_cluster) <- isc_cluster@meta.data$CCA_snn_res.1
table(Idents(isc_cluster) )
# evaluate marker expression in clusters
isc <- c("Dl", "Smvt", "sna", "polo", "stf", "cnn")
eb <- c("klu", "E(spl)m3-HLH", "E(spl)malpha-BFM", "E(spl)mbeta-HLH")
cluster.averages <- AverageExpression(isc_cluster, return.seurat=TRUE, group.by=c('integrated_celltype', 'sample'), assays='CCA')
DoHeatmap(cluster.averages, features=isc,
group.by=c('integrated_celltype', 'sample'),
draw.lines = TRUE, size=3) + theme(legend.position="none")
isc_cluster
# extract ISC/EB cluster from all cells
alldata.list <- SplitObject(alldata.int, split.by = "integrated_celltype")
isc_cluster <- alldata.list[["intestinal stem cell / enteroblast"]]
# re-cluster independently
DefaultAssay(isc_cluster) <- "CCA"
isc_cluster <- FindNeighbors(isc_cluster, dims = 1:30)
isc_cluster <- FindClusters(isc_cluster, resolution = 1, algorithm = 1)
DefaultAssay(isc_cluster) <- "RNA"
Idents(isc_cluster) <- isc_cluster@meta.data$CCA_snn_res.1
table(Idents(isc_cluster) )
# evaluate marker expression in clusters
isc <- c("Dl", "Smvt", "sna", "polo", "stf", "cnn")
eb <- c("klu", "E(spl)m3-HLH", "E(spl)malpha-BFM", "E(spl)mbeta-HLH")
cluster.averages <- AverageExpression(isc_cluster, return.seurat=TRUE, group.by=c('integrated_celltype', 'sample'), assays='CCA')
DoHeatmap(cluster.averages, features=isc,
group.by=c('integrated_celltype', 'sample'),
draw.lines = TRUE, size=3) + theme(legend.position="none")
cluster.averages <- AverageExpression(isc_cluster, return.seurat=TRUE, group.by=c('integrated_celltype', 'sample'), assays='RNA')
cluster.averages <- AverageExpression(isc_cluster, return.seurat=TRUE, group.by=c('integrated_celltype', 'sample'), assays='RNA')
DoHeatmap(cluster.averages, features=isc,
group.by=c('integrated_celltype', 'sample'),
draw.lines = TRUE, size=3) + theme(legend.position="none")
